// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
Not(in=instruction[15], out=notInstruction15);
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=instructionOrAluOut);
    Or(a=instruction[5], b=notInstruction15, out=loadA);
    ARegister(in=instructionOrAluOut, load=loadA, out=ARegOut, out[0..14]=addressM);
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=DRegOut);
    And(a=instruction[15], b=instruction[12], out=andInstruction1512);
    Mux16(a=ARegOut, b=inM, sel=andInstruction1512, out=ARegOrInM);
    ALU(x=DRegOut, y=ARegOrInM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=aluZrOut, ng=aluNgOut);
    And(a=instruction[15], b=instruction[3], out=writeM);
    And(a=instruction[15], b=instruction[2], out=andInstruction152);
    And(a=andInstruction152, b=aluNgOut, out=jlt);
    And(a=instruction[15], b=instruction[1], out=andInstruction151);
    And(a=andInstruction151, b=aluZrOut, out=jzr);
    And(a=instruction[15], b=instruction[0], out=andInstruction150);
    Not(in=aluZrOut, out=notAluZrOut);
    Not(in=aluNgOut, out=notAluNgOut);
    And(a=andInstruction150, b=notAluZrOut, out=jgt1);
    And(a=jgt1, b=notAluNgOut, out=jgt);
    Or(a=jlt, b=jzr, out=loadPC1);
    Or(a=loadPC1, b=jgt, out=loadPC);
    PC(in=ARegOut, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}
