// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP C1 {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15],out=NotIn15);
    Mux16(a=instruction,b=ALUout,sel=instruction[15],out=Amux);
    Or(a=NotIn15,b=instruction[5],out=LoadA);
    ARegister(in=Amux,load=LoadA,out=Areg,out[0..14]=addressM,out=pcin);
    And(a=instruction[15],b=instruction[4],out=LoadD);
    DRegister(in=ALUout,load=LoadD,out=Dreg);
    And(a=instruction[15],b=instruction[12],out=and1512);
    Mux16(a=Areg,b=inM,sel=and1512,out=ALUy);
    ALU(x=Dreg,y=ALUy,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=ALUout,zr=zero,ng=neg);
    And(a=instruction[15],b=instruction[3],out=writeM);
    Not(in=zero,out=notzero);
    Not(in=neg,out=notneg);
    And(a=notzero,b=notneg,out=pos);
    Not(in=instruction[2],out=notj1);
    Not(in=instruction[1],out=notj2);
    And(a=notj1,b=notj2,out=notj1andnotj2);
    Or(a=notj1andnotj2,b=instruction[1],out=notj1j2orj2);
    And(a=pos,b=notj1j2orj2,out=temp1);
    And(a=temp1,b=instruction[0],out=temp2);
    And(a=notneg,b=zero,out=notnegzero);
    And(a=notnegzero,b=instruction[1],out=temp3);
    And(a=notzero,b=neg,out=notzeroandneg);
    And(a=notzeroandneg,b=instruction[2],out=temp4);
    Or(a=temp2,b=temp3,out=temp5);
    Or(a=temp5,b=temp4,out=pcload);
    Not(in=pcload,out=inc);
    PC(in=pcin,inc=true,load=pcload,reset=reset,out[0..14]=pc);
}
